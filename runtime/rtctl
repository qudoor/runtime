#!/usr/bin/env python3
# coding: utf-8

import argparse
import configparser
import os
import platform
import subprocess
import sys
import shutil
from common.logger import Logger

class Runtime(object):

    def __init__(self):
        if os.getenv("RUNTIME_CONF"):
            self.RUNTIME_CONF_FILE = os.getenv("RUNTIME_CONF")
        else:
            self.RUNTIME_CONF_FILE = '/etc/runtime/runtime.conf'
        self.arch = self.get_arch()
        self.__check()
        self.BASE_PATH = self.read_conf_get_key_or_set_key(key="RT_BASE") + "/runtime"
        self.PLAYBOOK_BASE_PATH = self.read_conf_get_key_or_set_key(key="CONTAINER_PLAYBOOK_PATH")
        self.DOCKER_NAME = "runtime"
        self.EXEC_COMMAMD = ['docker', 'exec', '-i', self.DOCKER_NAME]


    @property
    def log_filename(self):
        LOG_NAME = "runtime.log"
        return LOG_NAME

    @property
    def log_filepath(self):
        return os.path.join(self.BASE_PATH, self.log_filename)

    @property
    def log_file(self):
        return open(self.log_filepath, 'a')

    @property
    def log_dir(self):
        return os.path.dirname(self.log_filepath)

    @property
    def LOG(self):
        return Logger(self.log_filename, level='debug').logger

    def __check(self):
        # 检查配置文件是否存在
        if not os.path.exists(self.RUNTIME_CONF_FILE):
            raise FileNotFoundError
        # 检查架构是否和runtime.conf 一致
        conf_arch = self.read_conf_get_key_or_set_key(key="RT_ARCH")
        if conf_arch != self.arch:
            self.read_conf_get_key_or_set_key(key="RT_ARCH", value=self.arch)

    def get_arch(self):
        if platform.machine() == "x86_64":
            return "amd64"
        return "arm64"

    def read_conf_get_key_or_set_key(self, key=None, value=None):
        _config = configparser.ConfigParser()
        # 重构恢复大写
        _config.optionxform = lambda option: option
        _config.read(self.RUNTIME_CONF_FILE)
        if value:
            _config.set("DEFAULT", key, value)
            _config.write(open(self.RUNTIME_CONF_FILE, 'w'))
        if key and not value:
            return _config.get("DEFAULT", key)

    def run_command(self, cmd, extra=None, is_shell=False):
        kwargs = {'stderr': self.log_file, 'stdout': self.log_file, 'shell': is_shell}
        kwargs.update(extra)
        _process = subprocess.Popen(cmd, **kwargs)
        _process.wait()
        return _process

    def start(self):
        cwd = self.BASE_PATH
        # 加载{runtime 执行路径 runtime.conf 环境变量}
        extra = {'cwd': cwd}
        cmd = [
            self.read_conf_get_key_or_set_key(key="DOCKER_COMPOSE_COMMAND"),
            'up', '-d'
        ]
        self.LOG.info("Ready to start runtime")
        s = self.run_command(cmd=cmd, extra=extra)
        if s.returncode != 0:
            self.LOG.error("Start error")
        else:
            self.LOG.info("Successfully started")

    def stop(self):
        cwd = self.BASE_PATH
        # 加载{runtime 执行路径 runtime.conf 环境变量}
        extra = {'cwd': cwd}
        cmd = [
            self.read_conf_get_key_or_set_key(key="DOCKER_COMPOSE_COMMAND"),
            'down'
        ]
        self.LOG.info("Ready to stop runtime")
        s = self.run_command(cmd=cmd, extra=extra)
        if s.returncode != 0:
            self.LOG.error("stop error")
        else:
            self.LOG.info("Successfully stopped")

    def status(self):
        cwd = self.BASE_PATH
        # 加载{runtime 执行路径 runtime.conf 环境变量}
        cmd = [
            self.read_conf_get_key_or_set_key(key="DOCKER_COMPOSE_COMMAND"),
            'ps'
        ]
        status = subprocess.Popen(cmd,stdout=subprocess.PIPE,cwd=cwd).communicate()[0]
        print(status.decode())

    def uninstall(self):
        is_remove = input("Uninstalling will delete runtime all data. Are you sure [y/n] : ")
        if is_remove == "yes" or is_remove == "y":
            self.LOG.info("Start deleting container data: \r\n")
            self.stop()
            rtctl_bin_link = "/usr/bin/rtctl"
            if os.path.exists(rtctl_bin_link):
                self.LOG.info("delete " + rtctl_bin_link)
                os.remove(rtctl_bin_link)
            self.LOG.info("Delete container data " + rtctl_bin_link)
            REMOVE_CMD = "docker images -q|xargs docker rmi -f 2&> /dev/null"
            cwd = self.BASE_PATH
            extra = {'cwd': cwd}
            s = self.run_command(cmd=REMOVE_CMD,extra=extra,is_shell=True)
            if s.returncode == 0:
                self.LOG.info("Delete container data successful")
            else:
                self.LOG.info("Delete container error")
            if os.path.exists(self.RUNTIME_CONF_FILE):
                print("Delete runtime config " + self.RUNTIME_CONF_FILE)
                os.remove(self.RUNTIME_CONF_FILE)
                print("Delete runtime config successful " + self.RUNTIME_CONF_FILE)
            if os.path.exists(self.BASE_PATH):
                self.LOG.info("Delete runtime folder " + self.BASE_PATH)
                shutil.rmtree(self.BASE_PATH)
                print("Delete runtime folder successful " + self.BASE_PATH)
            print("Delete Runtime successful")
        else:
            exit(1)

    def run(self, playbook=None,debug=False):
        self.run_playbook_by_name(playbook,debug=debug)

    def run_playbook_by_name(self, playbook_name=None,debug=False):
        if playbook_name == None:
            self.LOG.error("Please enter playbook")
            exit(1)
        cwd = self.BASE_PATH
        # 加载{runtime 执行路径 runtime.conf 环境变量}
        extra = {'cwd': cwd}
        if playbook_name not in self.playbook_list():
            self.LOG.error("playbook name error: "+ playbook_name )
            self.print_playbook_list()
            exit(1)
        playbook_file = self.PLAYBOOK_BASE_PATH + playbook_name + '.yml'
        # '/etc/runtime/playbook/roles/ncard/anaconda3/tasks/main.yml'
        if debug:
            DEBUG_CMD = '-vvv'
        else:
            DEBUG_CMD = '-v'
        CMD = [
            'ansible-playbook',
            DEBUG_CMD,
            '-i', '/etc/runtime/conf/hosts.hostname.ini',
            '-e', '@/etc/runtime/conf/variables.yml',
            playbook_file,
        ]
        run_playbook = self.run_command(self.EXEC_COMMAMD + CMD, extra=extra)
        self.LOG.info("Start Run " + playbook_name)
        if run_playbook.returncode == 0:
            self.LOG.info("Run: " + playbook_name + " Success")
        else:
            self.LOG.info("Run: " + playbook_name + " Error")

    def print_playbook_list(self):

        sys.stdout.write("runtime list: \r\n")

        for file in self.playbook_list():
            sys.stdout.write("    " + str(file) + '\r\n')

    def playbook_list(self):
        playbook_path = self.BASE_PATH + '/data/playbook'
        playbook_list = []
        for (dirpath, dirnames, filenames) in os.walk(playbook_path):
            for _file in filenames:
                file = str(_file).split(".")[0]
                playbook_list.append(file)
            break
        playbook_list.sort()
        return playbook_list

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""
        runtime control tools;
        """
    )
    parser.add_argument('action', type=str, choices=("start","status","stop","restart","run", "list","uninstall"), help="Action to run")
    parser.add_argument("--playbook", type=str, help="list：playbook list to find playbook name")
    parser.add_argument('-v', help="enable debugging", dest="wants_debug",
                        action='store_true', required=False, default=False)

    args = parser.parse_args()

    action = args.action

    r = Runtime()
    if action == "start":
        r.start()
    elif action == "stop":
        r.stop()
    elif action == "restart":
        r.stop()
        r.start()
    elif action == "status":
        r.status()
    elif action == "uninstall":
        r.uninstall()
    elif action == "list":
        r.print_playbook_list()
    elif action == "run":
        playbook = args.playbook
        r.run(playbook,debug=args.wants_debug)